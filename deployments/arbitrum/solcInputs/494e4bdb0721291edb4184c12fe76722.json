{
  "language": "Solidity",
  "sources": {
    "contracts/GenslerToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Based on Uniswap V2 @ https://github.com/Uniswap/v2-core/releases/tag/v1.0.1\n\npragma solidity =0.5.16;\n\nimport \"uniswap-v2-core/contracts/UniswapV2ERC20.sol\";\n\n/**\n * @title Sec-urity Gensler Meme Coin\n * @author The Security Team\n * @notice The goal of this coin is to satirize institutions in their futile war against the crypto space\n * \n * Supply Allocation\n * - 20% Team Supply (divided in 3 years on a weekly basis)\n * - 10% Marketing\n * - 10% DAO Fund\n * - 10% Liquidity\n * - 50% LP Farm Community\n * \n * Don't trust, verify:\n * Project: https://github.com/meme-factory/Sec-urity-Gensler\n * White Paper: https://github.com/meme-factory/Sec-urity-Gensler/blob/main/white-paper.md\n * Launchpad: Meme Factory https://github.com/meme-factory\n *\n * We are the army!\n * We are the crypto army!!\n * We are the meme crypto army!!!\n */\ncontract GenslerToken is UniswapV2ERC20 {\n    string public constant name = 'Sec-urity Gensler';\n    string public constant symbol = 'GENSLER';\n\n    address public constant TEAM_SUPPLY_VAULT = 0x91a0477de2Ec316f01872A8376e3191D115873Ef;\n    address public constant MARKETING_VAULT = 0x4db353F92a268a3F3BcDcD031808492816e0F00d;\n    address public constant DAO_FUND_VAULT = 0x38c3A5B0cb7c7F4fc3ef9Fd94868e95dcf83Be51;\n    address public constant LIQUIDITY_VAULT = 0x283b195AB4f7A7B813F95304120f146E9B94C2D1;\n    address public constant LP_FARM_COMMUNITY_VAULT = 0xa9C4C79FDFa8Ff63735d3129C9B3041CE83030AA;\n    \n    uint256 public constant TEAM_SUPPLY_ALLOCATION = 84_000_000_000 ether;\n    uint256 public constant MARKETING_ALLOCATION = 42_000_000_000 ether;\n    uint256 public constant DAO_FUND_ALLOCATION = 42_000_000_000 ether;\n    uint256 public constant LIQUIDITY_ALLOCATION = 42_000_000_000 ether;\n    uint256 public constant LP_FARM_COMMUNITY_ALLOCATION = 210_000_000_000 ether;\n    uint256 public constant GENSLER_TOTAL_SUPPLY_ALLOCATION = 420_000_000_000 ether;\n\n    constructor() public {\n        require(\n            TEAM_SUPPLY_ALLOCATION +\n            MARKETING_ALLOCATION +\n            DAO_FUND_ALLOCATION +\n            LIQUIDITY_ALLOCATION +\n            LP_FARM_COMMUNITY_ALLOCATION ==\n            GENSLER_TOTAL_SUPPLY_ALLOCATION\n        );\n\n        _mint(TEAM_SUPPLY_VAULT, TEAM_SUPPLY_ALLOCATION);\n        _mint(MARKETING_VAULT, MARKETING_ALLOCATION);\n        _mint(DAO_FUND_VAULT, DAO_FUND_ALLOCATION);\n        _mint(LIQUIDITY_VAULT, LIQUIDITY_ALLOCATION);\n        _mint(LP_FARM_COMMUNITY_VAULT, LP_FARM_COMMUNITY_ALLOCATION);\n    }\n}\n"
    },
    "uniswap-v2-core/contracts/interfaces/IUniswapV2ERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "uniswap-v2-core/contracts/libraries/SafeMath.sol": {
      "content": "pragma solidity =0.5.16;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
    },
    "uniswap-v2-core/contracts/UniswapV2ERC20.sol": {
      "content": "pragma solidity =0.5.16;\n\nimport './interfaces/IUniswapV2ERC20.sol';\nimport './libraries/SafeMath.sol';\n\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\n    using SafeMath for uint;\n\n    string public constant name = 'Uniswap V2';\n    string public constant symbol = 'UNI-V2';\n    uint8 public constant decimals = 18;\n    uint  public totalSupply;\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public nonces;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor() public {\n        uint chainId;\n        assembly {\n            chainId := chainid\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}